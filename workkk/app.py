from flask import Flask, render_template
import csv
from concurrent.futures import ThreadPoolExecutor
from pathlib import Path
from parser import parse_product  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ parser.py

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WORK_DIR = Path("C:/Users/alink/OneDrive/Desktop/work")
CSV_PATH = WORK_DIR / "URL_list.csv"
MAX_URLS = 100  # –õ–∏–º–∏—Ç URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∏–∑–º–µ–Ω–∏ –Ω–∞ –Ω—É–∂–Ω–æ–µ —á–∏—Å–ª–æ)
THREADS = 15    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤

def parse_batch(urls):
    """–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥"""
    with ThreadPoolExecutor(max_workers=THREADS) as executor:
        results = list(filter(None, executor.map(parse_product, urls)))
    return results

@app.route("/")
def show_results():
    # –ß—Ç–µ–Ω–∏–µ CSV
    with open(CSV_PATH, encoding='utf-8') as f:
        urls = [row[0] for row in csv.reader(f) if row and row[0].startswith('http')][:MAX_URLS]
    
    # –ü–∞—Ä—Å–∏–Ω–≥ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –≤ –∫–æ–Ω—Å–æ–ª–∏
    print(f"üîç –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ {len(urls)} URL...")
    results = parse_batch(urls)
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    return render_template("results.html", products=results)

if __name__ == "__main__":
    app.run(debug=True, threaded=True)  # –í–∫–ª—é—á–µ–Ω –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π —Ä–µ–∂–∏–º